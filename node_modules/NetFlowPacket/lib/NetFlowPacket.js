
/*Class to represent the fields in a netflow packet*/
var NetFlowPacket=module.exports=function(msg){
   msgBuffer=new Buffer(msg);
    this.header=new Object();
/*read in the header information common to all supported versions. Keep this in mind when adding new versions.*/
    if (msg.length>11){
       this.header['version']=msgBuffer.readUInt16BE(0);
       this.header['count']=msgBuffer.readUInt16BE(2);
/*       if ((this.header['count']<0)||((this.header['count']>30)){
        throw new Error("Packet count must be between 1 and 30");
       }*/
       this.header['sys_uptime']=msgBuffer.readUInt32BE(4);
       this.header['unix_secs']=msgBuffer.readUInt32BE(8);
    }
    else{
      throw new Error("Packet is "+msg.length+" bytes long, too short to be a netflow packet");
    }
/*Depending on the version and number of flows/flowsets, read in the rest of the heder and the flows/flowsets.  There should be a case for each supported version*/
    switch(this.header['version']){
    case 5:
      if (msg.length>23){
         this.header['unix_nsecs']=msgBuffer.readUInt32BE(12);
         this.header['flow_sequence']=msgBuffer.readUInt32BE(16);
         this.header['engine_type']=msgBuffer.readUInt8(20);
         this.header['engine_id']=msgBuffer.readUInt8(21);
         this.header['sampling_interval']=msgBuffer.readUInt16BE(22);
      }
      else{
      throw new Error("Packet is "+msg.length+" bytes long, too short to be a netflow version 5 packet");
      }
         this.v5Flows=new Array();
      for (var flowcount=0;flowcount<this.header['count'];flowcount++){
         var offset=24+(flowcount*48);
         if ((msg.length-offset)>47){
           var flow=new Object();
           flow.srcaddr=new Array();
           flow.dstaddr=new Array();
           flow.nexthop=new Array();
           flow.srcaddr[0]=msgBuffer.readUInt8(offset);
           flow.srcaddr[1]=msgBuffer.readUInt8(offset+1);
           flow.srcaddr[2]=msgBuffer.readUInt8(offset+2);
           flow.srcaddr[3]=msgBuffer.readUInt8(offset+3);
           flow.dstaddr[0]=msgBuffer.readUInt8(offset+4);
           flow.dstaddr[1]=msgBuffer.readUInt8(offset+5);
           flow.dstaddr[2]=msgBuffer.readUInt8(offset+6);
           flow.dstaddr[3]=msgBuffer.readUInt8(offset+7);
           flow.nexthop[0]=msgBuffer.readUInt8(offset+8);
           flow.nexthop[1]=msgBuffer.readUInt8(offset+9);
           flow.nexthop[2]=msgBuffer.readUInt8(offset+10);
           flow.nexthop[3]=msgBuffer.readUInt8(offset+11);
           flow.input=msgBuffer.readUInt16BE(offset+12);
           flow.output=msgBuffer.readUInt16BE(offset+14);
           flow.dPkts=msgBuffer.readUInt32BE(offset+16);
           flow.dOctets=msgBuffer.readUInt32BE(offset+20);
           flow.first=msgBuffer.readUInt32BE(offset+24);
           flow.last=msgBuffer.readUInt32BE(offset+28);
           flow.srcport=msgBuffer.readUInt16BE(offset+32);
           flow.dstport=msgBuffer.readUInt16BE(offset+34);
           flow.pad1=msgBuffer.readUInt8(offset+36);
           flow.tcp_flags=msgBuffer.readUInt8(offset+37);
           flow.prot=msgBuffer.readUInt8(offset+38);
           flow.tos=msgBuffer.readUInt8(offset+39);
           flow.src_as=msgBuffer.readUInt16BE(offset+40);
           flow.dst_as=msgBuffer.readUInt16BE(offset+42);
           flow.src_mask=msgBuffer.readUInt8(offset+44);
           flow.dst_mask=msgBuffer.readUInt8(offset+45);
           this.v5Flows[flowcount]=flow;
         }
      }
      break;
    case 9:
      if (msg.length>19){
         this.header['package_seqence']=msgBuffer.readUInt32BE(12);
         this.header['source_id']=msgBuffer.readUInt32BE(16);
         function parse(count, offset){
         if (count<this.header['count']){
            this.v9FlowSets[count]['flowsetid']=msgBuffer.readUInt16BE(offset);
            this.v9FlowSets[count]['length']= msgBuffer.readUInt16BE(offset+2);
            this.v9FlowSets[count];
            parse(count+1,offset+v9FlowSets[count]['length']);
         }
       }
      }
      else{
         console.log("throwing error");
         throw new Error("Packet is "+msg.length+" bytes long, too short to be a netflow version 9 packet");
         console.log("threw error");
      }
      break;
    }
}
